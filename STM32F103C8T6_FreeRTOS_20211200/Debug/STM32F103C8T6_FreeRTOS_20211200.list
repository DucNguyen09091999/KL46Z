
STM32F103C8T6_FreeRTOS_20211200.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002104  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002214  08002214  00012214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800225c  0800225c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800225c  0800225c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800225c  0800225c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d64  20000008  0800226c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d6c  0800226c  00021d6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002d  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b3a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010fc  00000000  00000000  00026b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  00027c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d8  00000000  00000000  000281d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010b7  00000000  00000000  000286a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005846  00000000  00000000  0002975f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ffda  00000000  00000000  0002efa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008ef7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001264  00000000  00000000  0008efd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c06      	ldr	r4, [pc, #24]	; (800012c <__do_global_dtors_aux+0x1c>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	2b00      	cmp	r3, #0
 8000118:	d107      	bne.n	800012a <__do_global_dtors_aux+0x1a>
 800011a:	4b05      	ldr	r3, [pc, #20]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011c:	2b00      	cmp	r3, #0
 800011e:	d002      	beq.n	8000126 <__do_global_dtors_aux+0x16>
 8000120:	4804      	ldr	r0, [pc, #16]	; (8000134 <__do_global_dtors_aux+0x24>)
 8000122:	f3af 8000 	nop.w
 8000126:	2301      	movs	r3, #1
 8000128:	7023      	strb	r3, [r4, #0]
 800012a:	bd10      	pop	{r4, pc}
 800012c:	20000008 	.word	0x20000008
 8000130:	00000000 	.word	0x00000000
 8000134:	080021fc 	.word	0x080021fc

08000138 <frame_dummy>:
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <frame_dummy+0x14>)
 800013a:	b510      	push	{r4, lr}
 800013c:	2b00      	cmp	r3, #0
 800013e:	d003      	beq.n	8000148 <frame_dummy+0x10>
 8000140:	4903      	ldr	r1, [pc, #12]	; (8000150 <frame_dummy+0x18>)
 8000142:	4804      	ldr	r0, [pc, #16]	; (8000154 <frame_dummy+0x1c>)
 8000144:	f3af 8000 	nop.w
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	2000000c 	.word	0x2000000c
 8000154:	080021fc 	.word	0x080021fc

08000158 <__udivsi3>:
 8000158:	2200      	movs	r2, #0
 800015a:	0843      	lsrs	r3, r0, #1
 800015c:	428b      	cmp	r3, r1
 800015e:	d374      	bcc.n	800024a <__udivsi3+0xf2>
 8000160:	0903      	lsrs	r3, r0, #4
 8000162:	428b      	cmp	r3, r1
 8000164:	d35f      	bcc.n	8000226 <__udivsi3+0xce>
 8000166:	0a03      	lsrs	r3, r0, #8
 8000168:	428b      	cmp	r3, r1
 800016a:	d344      	bcc.n	80001f6 <__udivsi3+0x9e>
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d328      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d30d      	bcc.n	8000194 <__udivsi3+0x3c>
 8000178:	22ff      	movs	r2, #255	; 0xff
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	ba12      	rev	r2, r2
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d302      	bcc.n	800018a <__udivsi3+0x32>
 8000184:	1212      	asrs	r2, r2, #8
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	d065      	beq.n	8000256 <__udivsi3+0xfe>
 800018a:	0b03      	lsrs	r3, r0, #12
 800018c:	428b      	cmp	r3, r1
 800018e:	d319      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000190:	e000      	b.n	8000194 <__udivsi3+0x3c>
 8000192:	0a09      	lsrs	r1, r1, #8
 8000194:	0bc3      	lsrs	r3, r0, #15
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x46>
 800019a:	03cb      	lsls	r3, r1, #15
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b83      	lsrs	r3, r0, #14
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x52>
 80001a6:	038b      	lsls	r3, r1, #14
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b43      	lsrs	r3, r0, #13
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x5e>
 80001b2:	034b      	lsls	r3, r1, #13
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x6a>
 80001be:	030b      	lsls	r3, r1, #12
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0ac3      	lsrs	r3, r0, #11
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x76>
 80001ca:	02cb      	lsls	r3, r1, #11
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a83      	lsrs	r3, r0, #10
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x82>
 80001d6:	028b      	lsls	r3, r1, #10
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a43      	lsrs	r3, r0, #9
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x8e>
 80001e2:	024b      	lsls	r3, r1, #9
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a03      	lsrs	r3, r0, #8
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x9a>
 80001ee:	020b      	lsls	r3, r1, #8
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	d2cd      	bcs.n	8000192 <__udivsi3+0x3a>
 80001f6:	09c3      	lsrs	r3, r0, #7
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xa8>
 80001fc:	01cb      	lsls	r3, r1, #7
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0983      	lsrs	r3, r0, #6
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xb4>
 8000208:	018b      	lsls	r3, r1, #6
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0943      	lsrs	r3, r0, #5
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xc0>
 8000214:	014b      	lsls	r3, r1, #5
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xcc>
 8000220:	010b      	lsls	r3, r1, #4
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	08c3      	lsrs	r3, r0, #3
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xd8>
 800022c:	00cb      	lsls	r3, r1, #3
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0883      	lsrs	r3, r0, #2
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xe4>
 8000238:	008b      	lsls	r3, r1, #2
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xf0>
 8000244:	004b      	lsls	r3, r1, #1
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	1a41      	subs	r1, r0, r1
 800024c:	d200      	bcs.n	8000250 <__udivsi3+0xf8>
 800024e:	4601      	mov	r1, r0
 8000250:	4152      	adcs	r2, r2
 8000252:	4610      	mov	r0, r2
 8000254:	4770      	bx	lr
 8000256:	e7ff      	b.n	8000258 <__udivsi3+0x100>
 8000258:	b501      	push	{r0, lr}
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f806 	bl	800026c <__aeabi_idiv0>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_uidivmod>:
 8000264:	2900      	cmp	r1, #0
 8000266:	d0f7      	beq.n	8000258 <__udivsi3+0x100>
 8000268:	e776      	b.n	8000158 <__udivsi3>
 800026a:	4770      	bx	lr

0800026c <__aeabi_idiv0>:
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3308      	adds	r3, #8
 800027c:	001a      	movs	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2201      	movs	r2, #1
 8000286:	4252      	negs	r2, r2
 8000288:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3308      	adds	r3, #8
 800028e:	001a      	movs	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3308      	adds	r3, #8
 8000298:	001a      	movs	r2, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b002      	add	sp, #8
 80002aa:	bd80      	pop	{r7, pc}

080002ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	b002      	add	sp, #8
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b084      	sub	sp, #16
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
 80002ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	1c5a      	adds	r2, r3, #1
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b004      	add	sp, #16
 8000304:	bd80      	pop	{r7, pc}

08000306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000306:	b580      	push	{r7, lr}
 8000308:	b084      	sub	sp, #16
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	3301      	adds	r3, #1
 800031a:	d103      	bne.n	8000324 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	691b      	ldr	r3, [r3, #16]
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e00c      	b.n	800033e <vListInsert+0x38>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3308      	adds	r3, #8
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	e002      	b.n	8000332 <vListInsert+0x2c>
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	68ba      	ldr	r2, [r7, #8]
 800033a:	429a      	cmp	r2, r3
 800033c:	d2f6      	bcs.n	800032c <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	685a      	ldr	r2, [r3, #4]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	68fa      	ldr	r2, [r7, #12]
 8000352:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b004      	add	sp, #16
 8000370:	bd80      	pop	{r7, pc}

08000372 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b084      	sub	sp, #16
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	6892      	ldr	r2, [r2, #8]
 8000388:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	6852      	ldr	r2, [r2, #4]
 8000392:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	429a      	cmp	r2, r3
 800039c:	d103      	bne.n	80003a6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1e5a      	subs	r2, r3, #1
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	681b      	ldr	r3, [r3, #0]
}
 80003ba:	0018      	movs	r0, r3
 80003bc:	46bd      	mov	sp, r7
 80003be:	b004      	add	sp, #16
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b084      	sub	sp, #16
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
 80003ca:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d101      	bne.n	80003da <xQueueGenericReset+0x18>
 80003d6:	b672      	cpsid	i
 80003d8:	e7fe      	b.n	80003d8 <xQueueGenericReset+0x16>

    taskENTER_CRITICAL();
 80003da:	f001 fd39 	bl	8001e50 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ea:	434b      	muls	r3, r1
 80003ec:	18d2      	adds	r2, r2, r3
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	2200      	movs	r2, #0
 80003f6:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000408:	1e59      	subs	r1, r3, #1
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040e:	434b      	muls	r3, r1
 8000410:	18d2      	adds	r2, r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2244      	movs	r2, #68	; 0x44
 800041a:	21ff      	movs	r1, #255	; 0xff
 800041c:	5499      	strb	r1, [r3, r2]
        pxQueue->cTxLock = queueUNLOCKED;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	2245      	movs	r2, #69	; 0x45
 8000422:	21ff      	movs	r1, #255	; 0xff
 8000424:	5499      	strb	r1, [r3, r2]

        if( xNewQueue == pdFALSE )
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d10d      	bne.n	8000448 <xQueueGenericReset+0x86>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d013      	beq.n	800045c <xQueueGenericReset+0x9a>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3310      	adds	r3, #16
 8000438:	0018      	movs	r0, r3
 800043a:	f000 ff55 	bl	80012e8 <xTaskRemoveFromEventList>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d00c      	beq.n	800045c <xQueueGenericReset+0x9a>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000442:	f001 fcf5 	bl	8001e30 <vPortYield>
 8000446:	e009      	b.n	800045c <xQueueGenericReset+0x9a>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3310      	adds	r3, #16
 800044c:	0018      	movs	r0, r3
 800044e:	f7ff ff0f 	bl	8000270 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3324      	adds	r3, #36	; 0x24
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff0a 	bl	8000270 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800045c:	f001 fd0a 	bl	8001e74 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000460:	2301      	movs	r3, #1
}
 8000462:	0018      	movs	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	b004      	add	sp, #16
 8000468:	bd80      	pop	{r7, pc}

0800046a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800046a:	b590      	push	{r4, r7, lr}
 800046c:	b08b      	sub	sp, #44	; 0x2c
 800046e:	af02      	add	r7, sp, #8
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d101      	bne.n	8000482 <xQueueGenericCreate+0x18>
 800047e:	b672      	cpsid	i
 8000480:	e7fe      	b.n	8000480 <xQueueGenericCreate+0x16>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	4353      	muls	r3, r2
 8000488:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <xQueueGenericCreate+0x38>
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	69f8      	ldr	r0, [r7, #28]
 8000494:	f7ff fe60 	bl	8000158 <__udivsi3>
 8000498:	0003      	movs	r3, r0
 800049a:	001a      	movs	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4293      	cmp	r3, r2
 80004a0:	d101      	bne.n	80004a6 <xQueueGenericCreate+0x3c>
 80004a2:	2301      	movs	r3, #1
 80004a4:	e000      	b.n	80004a8 <xQueueGenericCreate+0x3e>
 80004a6:	2300      	movs	r3, #0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <xQueueGenericCreate+0x46>
 80004ac:	b672      	cpsid	i
 80004ae:	e7fe      	b.n	80004ae <xQueueGenericCreate+0x44>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	3350      	adds	r3, #80	; 0x50
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fd5b 	bl	8001f70 <pvPortMalloc>
 80004ba:	0003      	movs	r3, r0
 80004bc:	61bb      	str	r3, [r7, #24]

        if( pxNewQueue != NULL )
 80004be:	69bb      	ldr	r3, [r7, #24]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d00e      	beq.n	80004e2 <xQueueGenericCreate+0x78>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004c4:	69bb      	ldr	r3, [r7, #24]
 80004c6:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	3350      	adds	r3, #80	; 0x50
 80004cc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	781c      	ldrb	r4, [r3, #0]
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	68f8      	ldr	r0, [r7, #12]
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	0023      	movs	r3, r4
 80004de:	f000 f805 	bl	80004ec <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004e2:	69bb      	ldr	r3, [r7, #24]
    }
 80004e4:	0018      	movs	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b009      	add	sp, #36	; 0x24
 80004ea:	bd90      	pop	{r4, r7, pc}

080004ec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	001a      	movs	r2, r3
 80004fa:	1cfb      	adds	r3, r7, #3
 80004fc:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	e002      	b.n	8000512 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2101      	movs	r1, #1
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff ff4d 	bl	80003c2 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	1cfa      	adds	r2, r7, #3
 800052c:	214c      	movs	r1, #76	; 0x4c
 800052e:	7812      	ldrb	r2, [r2, #0]
 8000530:	545a      	strb	r2, [r3, r1]
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b004      	add	sp, #16
 8000538:	bd80      	pop	{r7, pc}

0800053a <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b08a      	sub	sp, #40	; 0x28
 800053e:	af00      	add	r7, sp, #0
 8000540:	60f8      	str	r0, [r7, #12]
 8000542:	60b9      	str	r1, [r7, #8]
 8000544:	607a      	str	r2, [r7, #4]
 8000546:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d101      	bne.n	800055a <xQueueGenericSend+0x20>
 8000556:	b672      	cpsid	i
 8000558:	e7fe      	b.n	8000558 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <xQueueGenericSend+0x2e>
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <xQueueGenericSend+0x32>
 8000568:	2301      	movs	r3, #1
 800056a:	e000      	b.n	800056e <xQueueGenericSend+0x34>
 800056c:	2300      	movs	r3, #0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d101      	bne.n	8000576 <xQueueGenericSend+0x3c>
 8000572:	b672      	cpsid	i
 8000574:	e7fe      	b.n	8000574 <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	2b02      	cmp	r3, #2
 800057a:	d103      	bne.n	8000584 <xQueueGenericSend+0x4a>
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000580:	2b01      	cmp	r3, #1
 8000582:	d101      	bne.n	8000588 <xQueueGenericSend+0x4e>
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <xQueueGenericSend+0x50>
 8000588:	2300      	movs	r3, #0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <xQueueGenericSend+0x58>
 800058e:	b672      	cpsid	i
 8000590:	e7fe      	b.n	8000590 <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000592:	f001 f825 	bl	80015e0 <xTaskGetSchedulerState>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d102      	bne.n	80005a0 <xQueueGenericSend+0x66>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d101      	bne.n	80005a4 <xQueueGenericSend+0x6a>
 80005a0:	2301      	movs	r3, #1
 80005a2:	e000      	b.n	80005a6 <xQueueGenericSend+0x6c>
 80005a4:	2300      	movs	r3, #0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d101      	bne.n	80005ae <xQueueGenericSend+0x74>
 80005aa:	b672      	cpsid	i
 80005ac:	e7fe      	b.n	80005ac <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005ae:	f001 fc4f 	bl	8001e50 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d302      	bcc.n	80005c4 <xQueueGenericSend+0x8a>
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d11e      	bne.n	8000602 <xQueueGenericSend+0xc8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	6a3b      	ldr	r3, [r7, #32]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 f9aa 	bl	8000924 <prvCopyDataToQueue>
 80005d0:	0003      	movs	r3, r0
 80005d2:	61fb      	str	r3, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80005d4:	6a3b      	ldr	r3, [r7, #32]
 80005d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d009      	beq.n	80005f0 <xQueueGenericSend+0xb6>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80005dc:	6a3b      	ldr	r3, [r7, #32]
 80005de:	3324      	adds	r3, #36	; 0x24
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fe81 	bl	80012e8 <xTaskRemoveFromEventList>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d007      	beq.n	80005fa <xQueueGenericSend+0xc0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80005ea:	f001 fc21 	bl	8001e30 <vPortYield>
 80005ee:	e004      	b.n	80005fa <xQueueGenericSend+0xc0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <xQueueGenericSend+0xc0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80005f6:	f001 fc1b 	bl	8001e30 <vPortYield>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80005fa:	f001 fc3b 	bl	8001e74 <vPortExitCritical>
                return pdPASS;
 80005fe:	2301      	movs	r3, #1
 8000600:	e05b      	b.n	80006ba <xQueueGenericSend+0x180>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d103      	bne.n	8000610 <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000608:	f001 fc34 	bl	8001e74 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800060c:	2300      	movs	r3, #0
 800060e:	e054      	b.n	80006ba <xQueueGenericSend+0x180>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <xQueueGenericSend+0xea>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000616:	2314      	movs	r3, #20
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fec0 	bl	80013a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000620:	2301      	movs	r3, #1
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000624:	f001 fc26 	bl	8001e74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000628:	f000 fc72 	bl	8000f10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800062c:	f001 fc10 	bl	8001e50 <vPortEnterCritical>
 8000630:	6a3b      	ldr	r3, [r7, #32]
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	5c9b      	ldrb	r3, [r3, r2]
 8000636:	b25b      	sxtb	r3, r3
 8000638:	3301      	adds	r3, #1
 800063a:	d103      	bne.n	8000644 <xQueueGenericSend+0x10a>
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	2244      	movs	r2, #68	; 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	5499      	strb	r1, [r3, r2]
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	2245      	movs	r2, #69	; 0x45
 8000648:	5c9b      	ldrb	r3, [r3, r2]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	3301      	adds	r3, #1
 800064e:	d103      	bne.n	8000658 <xQueueGenericSend+0x11e>
 8000650:	6a3b      	ldr	r3, [r7, #32]
 8000652:	2245      	movs	r2, #69	; 0x45
 8000654:	2100      	movs	r1, #0
 8000656:	5499      	strb	r1, [r3, r2]
 8000658:	f001 fc0c 	bl	8001e74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	2314      	movs	r3, #20
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 feaf 	bl	80013c8 <xTaskCheckForTimeOut>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d11e      	bne.n	80006ac <xQueueGenericSend+0x172>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fa5c 	bl	8000b2e <prvIsQueueFull>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d011      	beq.n	800069e <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	3310      	adds	r3, #16
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fdec 	bl	8001260 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	0018      	movs	r0, r3
 800068c:	f000 f9db 	bl	8000a46 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000690:	f000 fc4a 	bl	8000f28 <xTaskResumeAll>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d18a      	bne.n	80005ae <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 8000698:	f001 fbca 	bl	8001e30 <vPortYield>
 800069c:	e787      	b.n	80005ae <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 f9d0 	bl	8000a46 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006a6:	f000 fc3f 	bl	8000f28 <xTaskResumeAll>
 80006aa:	e780      	b.n	80005ae <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f9c9 	bl	8000a46 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006b4:	f000 fc38 	bl	8000f28 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80006b8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b00a      	add	sp, #40	; 0x28
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80006c2:	b590      	push	{r4, r7, lr}
 80006c4:	b08b      	sub	sp, #44	; 0x2c
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <xQueueGenericSendFromISR+0x1c>
 80006da:	b672      	cpsid	i
 80006dc:	e7fe      	b.n	80006dc <xQueueGenericSendFromISR+0x1a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d103      	bne.n	80006ec <xQueueGenericSendFromISR+0x2a>
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <xQueueGenericSendFromISR+0x2e>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e000      	b.n	80006f2 <xQueueGenericSendFromISR+0x30>
 80006f0:	2300      	movs	r3, #0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <xQueueGenericSendFromISR+0x38>
 80006f6:	b672      	cpsid	i
 80006f8:	e7fe      	b.n	80006f8 <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d103      	bne.n	8000708 <xQueueGenericSendFromISR+0x46>
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000704:	2b01      	cmp	r3, #1
 8000706:	d101      	bne.n	800070c <xQueueGenericSendFromISR+0x4a>
 8000708:	2301      	movs	r3, #1
 800070a:	e000      	b.n	800070e <xQueueGenericSendFromISR+0x4c>
 800070c:	2300      	movs	r3, #0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <xQueueGenericSendFromISR+0x54>
 8000712:	b672      	cpsid	i
 8000714:	e7fe      	b.n	8000714 <xQueueGenericSendFromISR+0x52>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000716:	f001 fbc5 	bl	8001ea4 <ulSetInterruptMaskFromISR>
 800071a:	0003      	movs	r3, r0
 800071c:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000726:	429a      	cmp	r2, r3
 8000728:	d302      	bcc.n	8000730 <xQueueGenericSendFromISR+0x6e>
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d139      	bne.n	80007a4 <xQueueGenericSendFromISR+0xe2>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000730:	241b      	movs	r4, #27
 8000732:	193b      	adds	r3, r7, r4
 8000734:	6a3a      	ldr	r2, [r7, #32]
 8000736:	2145      	movs	r1, #69	; 0x45
 8000738:	5c52      	ldrb	r2, [r2, r1]
 800073a:	701a      	strb	r2, [r3, #0]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000740:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f8eb 	bl	8000924 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800074e:	193b      	adds	r3, r7, r4
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b25b      	sxtb	r3, r3
 8000754:	3301      	adds	r3, #1
 8000756:	d111      	bne.n	800077c <xQueueGenericSendFromISR+0xba>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	2b00      	cmp	r3, #0
 800075e:	d01e      	beq.n	800079e <xQueueGenericSendFromISR+0xdc>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	3324      	adds	r3, #36	; 0x24
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fdbf 	bl	80012e8 <xTaskRemoveFromEventList>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d017      	beq.n	800079e <xQueueGenericSendFromISR+0xdc>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d014      	beq.n	800079e <xQueueGenericSendFromISR+0xdc>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	e010      	b.n	800079e <xQueueGenericSendFromISR+0xdc>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800077c:	231b      	movs	r3, #27
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b25b      	sxtb	r3, r3
 8000784:	2b7f      	cmp	r3, #127	; 0x7f
 8000786:	d101      	bne.n	800078c <xQueueGenericSendFromISR+0xca>
 8000788:	b672      	cpsid	i
 800078a:	e7fe      	b.n	800078a <xQueueGenericSendFromISR+0xc8>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800078c:	231b      	movs	r3, #27
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	b259      	sxtb	r1, r3
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	2245      	movs	r2, #69	; 0x45
 800079c:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 800079e:	2301      	movs	r3, #1
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
        {
 80007a2:	e001      	b.n	80007a8 <xQueueGenericSendFromISR+0xe6>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fb80 	bl	8001eb0 <vClearInterruptMaskFromISR>

    return xReturn;
 80007b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80007b2:	0018      	movs	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b00b      	add	sp, #44	; 0x2c
 80007b8:	bd90      	pop	{r4, r7, pc}

080007ba <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b08a      	sub	sp, #40	; 0x28
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <xQueueReceive+0x1e>
 80007d4:	b672      	cpsid	i
 80007d6:	e7fe      	b.n	80007d6 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d103      	bne.n	80007e6 <xQueueReceive+0x2c>
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <xQueueReceive+0x30>
 80007e6:	2301      	movs	r3, #1
 80007e8:	e000      	b.n	80007ec <xQueueReceive+0x32>
 80007ea:	2300      	movs	r3, #0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d101      	bne.n	80007f4 <xQueueReceive+0x3a>
 80007f0:	b672      	cpsid	i
 80007f2:	e7fe      	b.n	80007f2 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80007f4:	f000 fef4 	bl	80015e0 <xTaskGetSchedulerState>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d102      	bne.n	8000802 <xQueueReceive+0x48>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d101      	bne.n	8000806 <xQueueReceive+0x4c>
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <xQueueReceive+0x4e>
 8000806:	2300      	movs	r3, #0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <xQueueReceive+0x56>
 800080c:	b672      	cpsid	i
 800080e:	e7fe      	b.n	800080e <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000810:	f001 fb1e 	bl	8001e50 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000818:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d01a      	beq.n	8000856 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	6a3b      	ldr	r3, [r7, #32]
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f000 f8e7 	bl	80009fa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	1e5a      	subs	r2, r3, #1
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d008      	beq.n	800084e <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	3310      	adds	r3, #16
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fd51 	bl	80012e8 <xTaskRemoveFromEventList>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800084a:	f001 faf1 	bl	8001e30 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800084e:	f001 fb11 	bl	8001e74 <vPortExitCritical>
                return pdPASS;
 8000852:	2301      	movs	r3, #1
 8000854:	e062      	b.n	800091c <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d103      	bne.n	8000864 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800085c:	f001 fb0a 	bl	8001e74 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000860:	2300      	movs	r3, #0
 8000862:	e05b      	b.n	800091c <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	2b00      	cmp	r3, #0
 8000868:	d106      	bne.n	8000878 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800086a:	2314      	movs	r3, #20
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fd96 	bl	80013a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000874:	2301      	movs	r3, #1
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000878:	f001 fafc 	bl	8001e74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800087c:	f000 fb48 	bl	8000f10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000880:	f001 fae6 	bl	8001e50 <vPortEnterCritical>
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	2244      	movs	r2, #68	; 0x44
 8000888:	5c9b      	ldrb	r3, [r3, r2]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	3301      	adds	r3, #1
 800088e:	d103      	bne.n	8000898 <xQueueReceive+0xde>
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	2244      	movs	r2, #68	; 0x44
 8000894:	2100      	movs	r1, #0
 8000896:	5499      	strb	r1, [r3, r2]
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	2245      	movs	r2, #69	; 0x45
 800089c:	5c9b      	ldrb	r3, [r3, r2]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	3301      	adds	r3, #1
 80008a2:	d103      	bne.n	80008ac <xQueueReceive+0xf2>
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	2245      	movs	r2, #69	; 0x45
 80008a8:	2100      	movs	r1, #0
 80008aa:	5499      	strb	r1, [r3, r2]
 80008ac:	f001 fae2 	bl	8001e74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	2314      	movs	r3, #20
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fd85 	bl	80013c8 <xTaskCheckForTimeOut>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d11e      	bne.n	8000900 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 f91c 	bl	8000b02 <prvIsQueueEmpty>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d011      	beq.n	80008f2 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	3324      	adds	r3, #36	; 0x24
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fcc2 	bl	8001260 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 f8b1 	bl	8000a46 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80008e4:	f000 fb20 	bl	8000f28 <xTaskResumeAll>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d191      	bne.n	8000810 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 80008ec:	f001 faa0 	bl	8001e30 <vPortYield>
 80008f0:	e78e      	b.n	8000810 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 f8a6 	bl	8000a46 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80008fa:	f000 fb15 	bl	8000f28 <xTaskResumeAll>
 80008fe:	e787      	b.n	8000810 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f89f 	bl	8000a46 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000908:	f000 fb0e 	bl	8000f28 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	0018      	movs	r0, r3
 8000910:	f000 f8f7 	bl	8000b02 <prvIsQueueEmpty>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d100      	bne.n	800091a <xQueueReceive+0x160>
 8000918:	e77a      	b.n	8000810 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800091a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b00a      	add	sp, #40	; 0x28
 8000922:	bd80      	pop	{r7, pc}

08000924 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000938:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10e      	bne.n	8000960 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d14e      	bne.n	80009e8 <prvCopyDataToQueue+0xc4>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fe62 	bl	8001618 <xTaskPriorityDisinherit>
 8000954:	0003      	movs	r3, r0
 8000956:	617b      	str	r3, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	e043      	b.n	80009e8 <prvCopyDataToQueue+0xc4>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d119      	bne.n	800099a <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6858      	ldr	r0, [r3, #4]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	0019      	movs	r1, r3
 8000972:	f001 fc31 	bl	80021d8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	429a      	cmp	r2, r3
 800098e:	d32b      	bcc.n	80009e8 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	e026      	b.n	80009e8 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	68d8      	ldr	r0, [r3, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	0019      	movs	r1, r3
 80009a6:	f001 fc17 	bl	80021d8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	425b      	negs	r3, r3
 80009b4:	18d2      	adds	r2, r2, r3
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	68da      	ldr	r2, [r3, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d207      	bcs.n	80009d6 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	425b      	negs	r3, r3
 80009d0:	18d2      	adds	r2, r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d105      	bne.n	80009e8 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80009f0:	697b      	ldr	r3, [r7, #20]
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b006      	add	sp, #24
 80009f8:	bd80      	pop	{r7, pc}

080009fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d018      	beq.n	8000a3e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	18d2      	adds	r2, r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d303      	bcc.n	8000a2e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68d9      	ldr	r1, [r3, #12]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f001 fbcd 	bl	80021d8 <memcpy>
    }
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a4e:	f001 f9ff 	bl	8001e50 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a52:	230f      	movs	r3, #15
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	2145      	movs	r1, #69	; 0x45
 8000a5a:	5c52      	ldrb	r2, [r2, r1]
 8000a5c:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a5e:	e013      	b.n	8000a88 <prvUnlockQueue+0x42>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d016      	beq.n	8000a96 <prvUnlockQueue+0x50>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3324      	adds	r3, #36	; 0x24
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fc3b 	bl	80012e8 <xTaskRemoveFromEventList>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <prvUnlockQueue+0x34>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000a76:	f000 fcfb 	bl	8001470 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a88:	230f      	movs	r3, #15
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	dce5      	bgt.n	8000a60 <prvUnlockQueue+0x1a>
 8000a94:	e000      	b.n	8000a98 <prvUnlockQueue+0x52>
                        break;
 8000a96:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2245      	movs	r2, #69	; 0x45
 8000a9c:	21ff      	movs	r1, #255	; 0xff
 8000a9e:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000aa0:	f001 f9e8 	bl	8001e74 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000aa4:	f001 f9d4 	bl	8001e50 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000aa8:	230e      	movs	r3, #14
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	2144      	movs	r1, #68	; 0x44
 8000ab0:	5c52      	ldrb	r2, [r2, r1]
 8000ab2:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ab4:	e013      	b.n	8000ade <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d016      	beq.n	8000aec <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3310      	adds	r3, #16
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 fc10 	bl	80012e8 <xTaskRemoveFromEventList>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8000acc:	f000 fcd0 	bl	8001470 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ad0:	210e      	movs	r1, #14
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ade:	230e      	movs	r3, #14
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	dce5      	bgt.n	8000ab6 <prvUnlockQueue+0x70>
 8000aea:	e000      	b.n	8000aee <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8000aec:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2244      	movs	r2, #68	; 0x44
 8000af2:	21ff      	movs	r1, #255	; 0xff
 8000af4:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000af6:	f001 f9bd 	bl	8001e74 <vPortExitCritical>
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b004      	add	sp, #16
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000b0a:	f001 f9a1 	bl	8001e50 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e001      	b.n	8000b20 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b20:	f001 f9a8 	bl	8001e74 <vPortExitCritical>

    return xReturn;
 8000b24:	68fb      	ldr	r3, [r7, #12]
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b004      	add	sp, #16
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000b36:	f001 f98b 	bl	8001e50 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d102      	bne.n	8000b4c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	e001      	b.n	8000b50 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b50:	f001 f990 	bl	8001e74 <vPortExitCritical>

    return xReturn;
 8000b54:	68fb      	ldr	r3, [r7, #12]
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000b6e:	f001 f96f 	bl	8001e50 <vPortEnterCritical>
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2244      	movs	r2, #68	; 0x44
 8000b76:	5c9b      	ldrb	r3, [r3, r2]
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	d103      	bne.n	8000b86 <vQueueWaitForMessageRestricted+0x28>
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	2244      	movs	r2, #68	; 0x44
 8000b82:	2100      	movs	r1, #0
 8000b84:	5499      	strb	r1, [r3, r2]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2245      	movs	r2, #69	; 0x45
 8000b8a:	5c9b      	ldrb	r3, [r3, r2]
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	3301      	adds	r3, #1
 8000b90:	d103      	bne.n	8000b9a <vQueueWaitForMessageRestricted+0x3c>
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2245      	movs	r2, #69	; 0x45
 8000b96:	2100      	movs	r1, #0
 8000b98:	5499      	strb	r1, [r3, r2]
 8000b9a:	f001 f96b 	bl	8001e74 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3324      	adds	r3, #36	; 0x24
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fb74 	bl	800129c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff ff45 	bl	8000a46 <prvUnlockQueue>
    }
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08d      	sub	sp, #52	; 0x34
 8000bc8:	af04      	add	r7, sp, #16
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	1dbb      	adds	r3, r7, #6
 8000bd2:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000bd4:	1dbb      	adds	r3, r7, #6
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 f9c8 	bl	8001f70 <pvPortMalloc>
 8000be0:	0003      	movs	r3, r0
 8000be2:	617b      	str	r3, [r7, #20]

                if( pxStack != NULL )
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d010      	beq.n	8000c0c <xTaskCreate+0x48>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000bea:	2058      	movs	r0, #88	; 0x58
 8000bec:	f001 f9c0 	bl	8001f70 <pvPortMalloc>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	61fb      	str	r3, [r7, #28]

                    if( pxNewTCB != NULL )
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <xTaskCreate+0x3e>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8000c00:	e006      	b.n	8000c10 <xTaskCreate+0x4c>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 f9f9 	bl	8001ffc <vPortFree>
 8000c0a:	e001      	b.n	8000c10 <xTaskCreate+0x4c>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d016      	beq.n	8000c44 <xTaskCreate+0x80>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c16:	1dbb      	adds	r3, r7, #6
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	683c      	ldr	r4, [r7, #0]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	2300      	movs	r3, #0
 8000c22:	9303      	str	r3, [sp, #12]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	0023      	movs	r3, r4
 8000c32:	f000 f80f 	bl	8000c54 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 f89b 	bl	8000d74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	e002      	b.n	8000c4a <xTaskCreate+0x86>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c44:	2301      	movs	r3, #1
 8000c46:	425b      	negs	r3, r3
 8000c48:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000c4a:	69bb      	ldr	r3, [r7, #24]
    }
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b009      	add	sp, #36	; 0x24
 8000c52:	bd90      	pop	{r4, r7, pc}

08000c54 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	21a5      	movs	r1, #165	; 0xa5
 8000c6e:	f001 fabc 	bl	80021ea <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	493d      	ldr	r1, [pc, #244]	; (8000d70 <prvInitialiseNewTask+0x11c>)
 8000c7a:	468c      	mov	ip, r1
 8000c7c:	4463      	add	r3, ip
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2207      	movs	r2, #7
 8000c88:	4393      	bics	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	2207      	movs	r2, #7
 8000c90:	4013      	ands	r3, r2
 8000c92:	d001      	beq.n	8000c98 <prvInitialiseNewTask+0x44>
 8000c94:	b672      	cpsid	i
 8000c96:	e7fe      	b.n	8000c96 <prvInitialiseNewTask+0x42>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d020      	beq.n	8000ce0 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e013      	b.n	8000ccc <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	7818      	ldrb	r0, [r3, #0]
 8000cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cae:	2134      	movs	r1, #52	; 0x34
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	18d3      	adds	r3, r2, r3
 8000cb4:	185b      	adds	r3, r3, r1
 8000cb6:	1c02      	adds	r2, r0, #0
 8000cb8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	18d3      	adds	r3, r2, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	2b09      	cmp	r3, #9
 8000cd0:	d9e8      	bls.n	8000ca4 <prvInitialiseNewTask+0x50>
 8000cd2:	e000      	b.n	8000cd6 <prvInitialiseNewTask+0x82>
            {
                break;
 8000cd4:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd8:	223d      	movs	r2, #61	; 0x3d
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]
 8000cde:	e003      	b.n	8000ce8 <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce2:	2234      	movs	r2, #52	; 0x34
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	5499      	strb	r1, [r3, r2]
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d901      	bls.n	8000cf2 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf4:	6a3a      	ldr	r2, [r7, #32]
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	6a3a      	ldr	r2, [r7, #32]
 8000cfc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d00:	2200      	movs	r2, #0
 8000d02:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	3304      	adds	r3, #4
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff facf 	bl	80002ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	3318      	adds	r3, #24
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff faca 	bl	80002ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	2205      	movs	r2, #5
 8000d22:	1ad2      	subs	r2, r2, r3
 8000d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d26:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d30:	3350      	adds	r3, #80	; 0x50
 8000d32:	2204      	movs	r2, #4
 8000d34:	2100      	movs	r1, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 fa57 	bl	80021ea <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	3354      	adds	r3, #84	; 0x54
 8000d40:	2201      	movs	r2, #1
 8000d42:	2100      	movs	r1, #0
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 fa50 	bl	80021ea <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 ffe5 	bl	8001d20 <pxPortInitialiseStack>
 8000d56:	0002      	movs	r2, r0
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b006      	add	sp, #24
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	3fffffff 	.word	0x3fffffff

08000d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000d7c:	f001 f868 	bl	8001e50 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <prvAddNewTaskToReadyList+0xb8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <prvAddNewTaskToReadyList+0xb8>)
 8000d88:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <prvAddNewTaskToReadyList+0xbc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <prvAddNewTaskToReadyList+0xbc>)
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <prvAddNewTaskToReadyList+0xb8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d110      	bne.n	8000dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000da0:	f000 fb80 	bl	80014a4 <prvInitialiseTaskLists>
 8000da4:	e00d      	b.n	8000dc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <prvAddNewTaskToReadyList+0xc0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d109      	bne.n	8000dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <prvAddNewTaskToReadyList+0xbc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d802      	bhi.n	8000dc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <prvAddNewTaskToReadyList+0xbc>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <prvAddNewTaskToReadyList+0xc4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <prvAddNewTaskToReadyList+0xc4>)
 8000dca:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <prvAddNewTaskToReadyList+0xc4>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <prvAddNewTaskToReadyList+0xc8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d903      	bls.n	8000de8 <prvAddNewTaskToReadyList+0x74>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <prvAddNewTaskToReadyList+0xc8>)
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dec:	0013      	movs	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	189b      	adds	r3, r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <prvAddNewTaskToReadyList+0xcc>)
 8000df6:	189a      	adds	r2, r3, r2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0010      	movs	r0, r2
 8000e00:	f7ff fa5f 	bl	80002c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000e04:	f001 f836 	bl	8001e74 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <prvAddNewTaskToReadyList+0xc0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d008      	beq.n	8000e22 <prvAddNewTaskToReadyList+0xae>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <prvAddNewTaskToReadyList+0xbc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d201      	bcs.n	8000e22 <prvAddNewTaskToReadyList+0xae>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000e1e:	f001 f807 	bl	8001e30 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	200000fc 	.word	0x200000fc
 8000e30:	20000024 	.word	0x20000024
 8000e34:	20000108 	.word	0x20000108
 8000e38:	20000118 	.word	0x20000118
 8000e3c:	20000104 	.word	0x20000104
 8000e40:	20000028 	.word	0x20000028

08000e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d010      	beq.n	8000e78 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <vTaskDelay+0x48>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <vTaskDelay+0x1e>
 8000e5e:	b672      	cpsid	i
 8000e60:	e7fe      	b.n	8000e60 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8000e62:	f000 f855 	bl	8000f10 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 fc30 	bl	80016d0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000e70:	f000 f85a 	bl	8000f28 <xTaskResumeAll>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8000e7e:	f000 ffd7 	bl	8001e30 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	20000124 	.word	0x20000124

08000e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000e96:	4917      	ldr	r1, [pc, #92]	; (8000ef4 <vTaskStartScheduler+0x64>)
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <vTaskStartScheduler+0x68>)
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <vTaskStartScheduler+0x6c>)
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2246      	movs	r2, #70	; 0x46
 8000ea6:	f7ff fe8d 	bl	8000bc4 <xTaskCreate>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	607b      	str	r3, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d103      	bne.n	8000ebc <vTaskStartScheduler+0x2c>
            {
                xReturn = xTimerCreateTimerTask();
 8000eb4:	f000 fc60 	bl	8001778 <xTimerCreateTimerTask>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	607b      	str	r3, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10d      	bne.n	8000ede <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8000ec2:	b672      	cpsid	i
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <vTaskStartScheduler+0x70>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4252      	negs	r2, r2
 8000eca:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <vTaskStartScheduler+0x74>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <vTaskStartScheduler+0x78>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000ed8:	f000 ff86 	bl	8001de8 <xPortStartScheduler>
 8000edc:	e004      	b.n	8000ee8 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <vTaskStartScheduler+0x58>
 8000ee4:	b672      	cpsid	i
 8000ee6:	e7fe      	b.n	8000ee6 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <vTaskStartScheduler+0x7c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	08002214 	.word	0x08002214
 8000ef8:	08001485 	.word	0x08001485
 8000efc:	20000120 	.word	0x20000120
 8000f00:	2000011c 	.word	0x2000011c
 8000f04:	20000108 	.word	0x20000108
 8000f08:	20000100 	.word	0x20000100
 8000f0c:	20000000 	.word	0x20000000

08000f10 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <vTaskSuspendAll+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <vTaskSuspendAll+0x14>)
 8000f1c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000124 	.word	0x20000124

08000f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <xTaskResumeAll+0xf8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <xTaskResumeAll+0x1a>
 8000f3e:	b672      	cpsid	i
 8000f40:	e7fe      	b.n	8000f40 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000f42:	f000 ff85 	bl	8001e50 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <xTaskResumeAll+0xf8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	4b34      	ldr	r3, [pc, #208]	; (8001020 <xTaskResumeAll+0xf8>)
 8000f4e:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f50:	4b33      	ldr	r3, [pc, #204]	; (8001020 <xTaskResumeAll+0xf8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d15b      	bne.n	8001010 <xTaskResumeAll+0xe8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f58:	4b32      	ldr	r3, [pc, #200]	; (8001024 <xTaskResumeAll+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d057      	beq.n	8001010 <xTaskResumeAll+0xe8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f60:	e02f      	b.n	8000fc2 <xTaskResumeAll+0x9a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <xTaskResumeAll+0x100>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff f9ff 	bl	8000372 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3304      	adds	r3, #4
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff f9fa 	bl	8000372 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <xTaskResumeAll+0x104>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d903      	bls.n	8000f92 <xTaskResumeAll+0x6a>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <xTaskResumeAll+0x104>)
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f96:	0013      	movs	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	189b      	adds	r3, r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4a24      	ldr	r2, [pc, #144]	; (8001030 <xTaskResumeAll+0x108>)
 8000fa0:	189a      	adds	r2, r3, r2
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	0010      	movs	r0, r2
 8000faa:	f7ff f98a 	bl	80002c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <xTaskResumeAll+0x10c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d302      	bcc.n	8000fc2 <xTaskResumeAll+0x9a>
                    {
                        xYieldPending = pdTRUE;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <xTaskResumeAll+0x110>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <xTaskResumeAll+0x100>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1cb      	bne.n	8000f62 <xTaskResumeAll+0x3a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <xTaskResumeAll+0xac>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000fd0:	f000 faec 	bl	80015ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <xTaskResumeAll+0x114>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00f      	beq.n	8001000 <xTaskResumeAll+0xd8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000fe0:	f000 f83c 	bl	800105c <xTaskIncrementTick>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d002      	beq.n	8000fee <xTaskResumeAll+0xc6>
                            {
                                xYieldPending = pdTRUE;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <xTaskResumeAll+0x110>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f2      	bne.n	8000fe0 <xTaskResumeAll+0xb8>

                        xPendedTicks = 0;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <xTaskResumeAll+0x114>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <xTaskResumeAll+0x110>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <xTaskResumeAll+0xe8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001008:	2301      	movs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800100c:	f000 ff10 	bl	8001e30 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001010:	f000 ff30 	bl	8001e74 <vPortExitCritical>

    return xAlreadyYielded;
 8001014:	68bb      	ldr	r3, [r7, #8]
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b004      	add	sp, #16
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	20000124 	.word	0x20000124
 8001024:	200000fc 	.word	0x200000fc
 8001028:	200000bc 	.word	0x200000bc
 800102c:	20000104 	.word	0x20000104
 8001030:	20000028 	.word	0x20000028
 8001034:	20000024 	.word	0x20000024
 8001038:	20000110 	.word	0x20000110
 800103c:	2000010c 	.word	0x2000010c

08001040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <xTaskGetTickCount+0x18>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000100 	.word	0x20000100

0800105c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001066:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <xTaskIncrementTick+0x134>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d000      	beq.n	8001070 <xTaskIncrementTick+0x14>
 800106e:	e084      	b.n	800117a <xTaskIncrementTick+0x11e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001070:	4b48      	ldr	r3, [pc, #288]	; (8001194 <xTaskIncrementTick+0x138>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001078:	4b46      	ldr	r3, [pc, #280]	; (8001194 <xTaskIncrementTick+0x138>)
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d117      	bne.n	80010b4 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8001084:	4b44      	ldr	r3, [pc, #272]	; (8001198 <xTaskIncrementTick+0x13c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <xTaskIncrementTick+0x36>
 800108e:	b672      	cpsid	i
 8001090:	e7fe      	b.n	8001090 <xTaskIncrementTick+0x34>
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <xTaskIncrementTick+0x13c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <xTaskIncrementTick+0x140>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <xTaskIncrementTick+0x13c>)
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	4b3e      	ldr	r3, [pc, #248]	; (800119c <xTaskIncrementTick+0x140>)
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <xTaskIncrementTick+0x144>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <xTaskIncrementTick+0x144>)
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f000 fa7c 	bl	80015ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80010b4:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <xTaskIncrementTick+0x148>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d349      	bcc.n	8001152 <xTaskIncrementTick+0xf6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <xTaskIncrementTick+0x13c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <xTaskIncrementTick+0x76>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <xTaskIncrementTick+0x148>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	4252      	negs	r2, r2
 80010ce:	601a      	str	r2, [r3, #0]
                    break;
 80010d0:	e03f      	b.n	8001152 <xTaskIncrementTick+0xf6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <xTaskIncrementTick+0x13c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d203      	bcs.n	80010f2 <xTaskIncrementTick+0x96>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <xTaskIncrementTick+0x148>)
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80010f0:	e02f      	b.n	8001152 <xTaskIncrementTick+0xf6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3304      	adds	r3, #4
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff f93b 	bl	8000372 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <xTaskIncrementTick+0xb2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	3318      	adds	r3, #24
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff f932 	bl	8000372 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <xTaskIncrementTick+0x14c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d903      	bls.n	8001122 <xTaskIncrementTick+0xc6>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <xTaskIncrementTick+0x14c>)
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001126:	0013      	movs	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	189b      	adds	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <xTaskIncrementTick+0x150>)
 8001130:	189a      	adds	r2, r3, r2
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3304      	adds	r3, #4
 8001136:	0019      	movs	r1, r3
 8001138:	0010      	movs	r0, r2
 800113a:	f7ff f8c2 	bl	80002c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <xTaskIncrementTick+0x154>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	429a      	cmp	r2, r3
 800114a:	d3b8      	bcc.n	80010be <xTaskIncrementTick+0x62>
                            {
                                xSwitchRequired = pdTRUE;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001150:	e7b5      	b.n	80010be <xTaskIncrementTick+0x62>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <xTaskIncrementTick+0x154>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001158:	4914      	ldr	r1, [pc, #80]	; (80011ac <xTaskIncrementTick+0x150>)
 800115a:	0013      	movs	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	189b      	adds	r3, r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	585b      	ldr	r3, [r3, r1]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d901      	bls.n	800116c <xTaskIncrementTick+0x110>
                {
                    xSwitchRequired = pdTRUE;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <xTaskIncrementTick+0x158>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8001174:	2301      	movs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e004      	b.n	8001184 <xTaskIncrementTick+0x128>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <xTaskIncrementTick+0x15c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <xTaskIncrementTick+0x15c>)
 8001182:	601a      	str	r2, [r3, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001184:	697b      	ldr	r3, [r7, #20]
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b006      	add	sp, #24
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	20000124 	.word	0x20000124
 8001194:	20000100 	.word	0x20000100
 8001198:	200000b4 	.word	0x200000b4
 800119c:	200000b8 	.word	0x200000b8
 80011a0:	20000114 	.word	0x20000114
 80011a4:	2000011c 	.word	0x2000011c
 80011a8:	20000104 	.word	0x20000104
 80011ac:	20000028 	.word	0x20000028
 80011b0:	20000024 	.word	0x20000024
 80011b4:	20000110 	.word	0x20000110
 80011b8:	2000010c 	.word	0x2000010c

080011bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <vTaskSwitchContext+0x90>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <vTaskSwitchContext+0x94>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80011d0:	e037      	b.n	8001242 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <vTaskSwitchContext+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <vTaskSwitchContext+0x98>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e007      	b.n	80011f0 <vTaskSwitchContext+0x34>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <vTaskSwitchContext+0x2e>
 80011e6:	b672      	cpsid	i
 80011e8:	e7fe      	b.n	80011e8 <vTaskSwitchContext+0x2c>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4919      	ldr	r1, [pc, #100]	; (8001258 <vTaskSwitchContext+0x9c>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	0013      	movs	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	189b      	adds	r3, r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	585b      	ldr	r3, [r3, r1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0ee      	beq.n	80011e0 <vTaskSwitchContext+0x24>
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	0013      	movs	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	189b      	adds	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <vTaskSwitchContext+0x9c>)
 800120e:	189b      	adds	r3, r3, r2
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3308      	adds	r3, #8
 8001224:	429a      	cmp	r2, r3
 8001226:	d104      	bne.n	8001232 <vTaskSwitchContext+0x76>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <vTaskSwitchContext+0xa0>)
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <vTaskSwitchContext+0x98>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	20000124 	.word	0x20000124
 8001250:	20000110 	.word	0x20000110
 8001254:	20000104 	.word	0x20000104
 8001258:	20000028 	.word	0x20000028
 800125c:	20000024 	.word	0x20000024

08001260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <vTaskPlaceOnEventList+0x14>
 8001270:	b672      	cpsid	i
 8001272:	e7fe      	b.n	8001272 <vTaskPlaceOnEventList+0x12>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <vTaskPlaceOnEventList+0x38>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3318      	adds	r3, #24
 800127a:	001a      	movs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff f840 	bl	8000306 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	0018      	movs	r0, r3
 800128c:	f000 fa20 	bl	80016d0 <prvAddCurrentTaskToDelayedList>
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000024 	.word	0x20000024

0800129c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <vTaskPlaceOnEventListRestricted+0x16>
 80012ae:	b672      	cpsid	i
 80012b0:	e7fe      	b.n	80012b0 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <vTaskPlaceOnEventListRestricted+0x48>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3318      	adds	r3, #24
 80012b8:	001a      	movs	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f7fe ffff 	bl	80002c2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <vTaskPlaceOnEventListRestricted+0x34>
        {
            xTicksToWait = portMAX_DELAY;
 80012ca:	2301      	movs	r3, #1
 80012cc:	425b      	negs	r3, r3
 80012ce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f9fa 	bl	80016d0 <prvAddCurrentTaskToDelayedList>
    }
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b004      	add	sp, #16
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000024 	.word	0x20000024

080012e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <xTaskRemoveFromEventList+0x1a>
 80012fe:	b672      	cpsid	i
 8001300:	e7fe      	b.n	8001300 <xTaskRemoveFromEventList+0x18>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3318      	adds	r3, #24
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff f833 	bl	8000372 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <xTaskRemoveFromEventList+0xa0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d11d      	bne.n	8001350 <xTaskRemoveFromEventList+0x68>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3304      	adds	r3, #4
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff f82a 	bl	8000372 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <xTaskRemoveFromEventList+0xa4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d903      	bls.n	8001332 <xTaskRemoveFromEventList+0x4a>
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <xTaskRemoveFromEventList+0xa4>)
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001336:	0013      	movs	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	189b      	adds	r3, r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <xTaskRemoveFromEventList+0xa8>)
 8001340:	189a      	adds	r2, r3, r2
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3304      	adds	r3, #4
 8001346:	0019      	movs	r1, r3
 8001348:	0010      	movs	r0, r2
 800134a:	f7fe ffba 	bl	80002c2 <vListInsertEnd>
 800134e:	e007      	b.n	8001360 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3318      	adds	r3, #24
 8001354:	001a      	movs	r2, r3
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <xTaskRemoveFromEventList+0xac>)
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f7fe ffb1 	bl	80002c2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <xTaskRemoveFromEventList+0xb0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	429a      	cmp	r2, r3
 800136c:	d905      	bls.n	800137a <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800136e:	2301      	movs	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <xTaskRemoveFromEventList+0xb4>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e001      	b.n	800137e <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b004      	add	sp, #16
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000124 	.word	0x20000124
 800138c:	20000104 	.word	0x20000104
 8001390:	20000028 	.word	0x20000028
 8001394:	200000bc 	.word	0x200000bc
 8001398:	20000024 	.word	0x20000024
 800139c:	20000110 	.word	0x20000110

080013a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <vTaskInternalSetTimeOutState+0x20>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <vTaskInternalSetTimeOutState+0x24>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000114 	.word	0x20000114
 80013c4:	20000100 	.word	0x20000100

080013c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <xTaskCheckForTimeOut+0x14>
 80013d8:	b672      	cpsid	i
 80013da:	e7fe      	b.n	80013da <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <xTaskCheckForTimeOut+0x1e>
 80013e2:	b672      	cpsid	i
 80013e4:	e7fe      	b.n	80013e4 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 80013e6:	f000 fd33 	bl	8001e50 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <xTaskCheckForTimeOut+0xa0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	d102      	bne.n	8001408 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e027      	b.n	8001458 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <xTaskCheckForTimeOut+0xa4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d00a      	beq.n	800142a <xTaskCheckForTimeOut+0x62>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	429a      	cmp	r2, r3
 800141c:	d305      	bcc.n	800142a <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e016      	b.n	8001458 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d20c      	bcs.n	800144e <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1ad2      	subs	r2, r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ffac 	bl	80013a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e004      	b.n	8001458 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001454:	2301      	movs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001458:	f000 fd0c 	bl	8001e74 <vPortExitCritical>

    return xReturn;
 800145c:	697b      	ldr	r3, [r7, #20]
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b006      	add	sp, #24
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	20000100 	.word	0x20000100
 800146c:	20000114 	.word	0x20000114

08001470 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <vTaskMissedYield+0x10>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000110 	.word	0x20000110

08001484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800148c:	f000 f84e 	bl	800152c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <prvIdleTask+0x1c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d9f9      	bls.n	800148c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001498:	f000 fcca 	bl	8001e30 <vPortYield>
        prvCheckTasksWaitingTermination();
 800149c:	e7f6      	b.n	800148c <prvIdleTask+0x8>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	20000028 	.word	0x20000028

080014a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e00c      	b.n	80014ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	0013      	movs	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	189b      	adds	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <prvInitialiseTaskLists+0x68>)
 80014bc:	189b      	adds	r3, r3, r2
 80014be:	0018      	movs	r0, r3
 80014c0:	f7fe fed6 	bl	8000270 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3301      	adds	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d9ef      	bls.n	80014b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <prvInitialiseTaskLists+0x6c>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7fe fecc 	bl	8000270 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <prvInitialiseTaskLists+0x70>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f7fe fec8 	bl	8000270 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <prvInitialiseTaskLists+0x74>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7fe fec4 	bl	8000270 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <prvInitialiseTaskLists+0x78>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7fe fec0 	bl	8000270 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <prvInitialiseTaskLists+0x7c>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7fe febc 	bl	8000270 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <prvInitialiseTaskLists+0x80>)
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <prvInitialiseTaskLists+0x6c>)
 80014fc:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <prvInitialiseTaskLists+0x84>)
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <prvInitialiseTaskLists+0x70>)
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000028 	.word	0x20000028
 8001510:	2000008c 	.word	0x2000008c
 8001514:	200000a0 	.word	0x200000a0
 8001518:	200000bc 	.word	0x200000bc
 800151c:	200000d0 	.word	0x200000d0
 8001520:	200000e8 	.word	0x200000e8
 8001524:	200000b4 	.word	0x200000b4
 8001528:	200000b8 	.word	0x200000b8

0800152c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001532:	e01a      	b.n	800156a <prvCheckTasksWaitingTermination+0x3e>
            {
                taskENTER_CRITICAL();
 8001534:	f000 fc8c 	bl	8001e50 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <prvCheckTasksWaitingTermination+0x50>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	0018      	movs	r0, r3
 8001546:	f7fe ff14 	bl	8000372 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <prvCheckTasksWaitingTermination+0x54>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <prvCheckTasksWaitingTermination+0x54>)
 8001552:	601a      	str	r2, [r3, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <prvCheckTasksWaitingTermination+0x58>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1e5a      	subs	r2, r3, #1
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <prvCheckTasksWaitingTermination+0x58>)
 800155c:	601a      	str	r2, [r3, #0]
                }
                taskEXIT_CRITICAL();
 800155e:	f000 fc89 	bl	8001e74 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	0018      	movs	r0, r3
 8001566:	f000 f80f 	bl	8001588 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <prvCheckTasksWaitingTermination+0x58>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1e0      	bne.n	8001534 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200000d0 	.word	0x200000d0
 8001580:	200000fc 	.word	0x200000fc
 8001584:	200000e4 	.word	0x200000e4

08001588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	0018      	movs	r0, r3
 8001596:	f000 fd31 	bl	8001ffc <vPortFree>
                vPortFree( pxTCB );
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0018      	movs	r0, r3
 800159e:	f000 fd2d 	bl	8001ffc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <prvResetNextTaskUnblockTime+0x2c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <prvResetNextTaskUnblockTime+0x30>)
 80015bc:	2201      	movs	r2, #1
 80015be:	4252      	negs	r2, r2
 80015c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80015c2:	e005      	b.n	80015d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <prvResetNextTaskUnblockTime+0x2c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <prvResetNextTaskUnblockTime+0x30>)
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	200000b4 	.word	0x200000b4
 80015dc:	2000011c 	.word	0x2000011c

080015e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <xTaskGetSchedulerState+0x30>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80015ee:	2301      	movs	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	e008      	b.n	8001606 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <xTaskGetSchedulerState+0x34>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80015fc:	2302      	movs	r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	e001      	b.n	8001606 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001606:	687b      	ldr	r3, [r7, #4]
    }
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b002      	add	sp, #8
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000108 	.word	0x20000108
 8001614:	20000124 	.word	0x20000124

08001618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <xTaskPriorityDisinherit+0xa0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <xTaskPriorityDisinherit+0xac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <xTaskPriorityDisinherit+0x24>
 8001638:	b672      	cpsid	i
 800163a:	e7fe      	b.n	800163a <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <xTaskPriorityDisinherit+0x30>
 8001644:	b672      	cpsid	i
 8001646:	e7fe      	b.n	8001646 <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	1e5a      	subs	r2, r3, #1
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	429a      	cmp	r2, r3
 800165c:	d02c      	beq.n	80016b8 <xTaskPriorityDisinherit+0xa0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	2b00      	cmp	r3, #0
 8001664:	d128      	bne.n	80016b8 <xTaskPriorityDisinherit+0xa0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3304      	adds	r3, #4
 800166a:	0018      	movs	r0, r3
 800166c:	f7fe fe81 	bl	8000372 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2205      	movs	r2, #5
 800167e:	1ad2      	subs	r2, r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <xTaskPriorityDisinherit+0xb0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d903      	bls.n	8001698 <xTaskPriorityDisinherit+0x80>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <xTaskPriorityDisinherit+0xb0>)
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	0013      	movs	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	189b      	adds	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4a09      	ldr	r2, [pc, #36]	; (80016cc <xTaskPriorityDisinherit+0xb4>)
 80016a6:	189a      	adds	r2, r3, r2
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3304      	adds	r3, #4
 80016ac:	0019      	movs	r1, r3
 80016ae:	0010      	movs	r0, r2
 80016b0:	f7fe fe07 	bl	80002c2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80016b8:	68fb      	ldr	r3, [r7, #12]
    }
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	20000024 	.word	0x20000024
 80016c8:	20000104 	.word	0x20000104
 80016cc:	20000028 	.word	0x20000028

080016d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <prvAddCurrentTaskToDelayedList+0x90>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <prvAddCurrentTaskToDelayedList+0x94>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3304      	adds	r3, #4
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7fe fe43 	bl	8000372 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3301      	adds	r3, #1
 80016f0:	d10b      	bne.n	800170a <prvAddCurrentTaskToDelayedList+0x3a>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <prvAddCurrentTaskToDelayedList+0x94>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	1d1a      	adds	r2, r3, #4
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <prvAddCurrentTaskToDelayedList+0x98>)
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f7fe fddd 	bl	80002c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001708:	e026      	b.n	8001758 <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <prvAddCurrentTaskToDelayedList+0x94>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	429a      	cmp	r2, r3
 8001720:	d209      	bcs.n	8001736 <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <prvAddCurrentTaskToDelayedList+0x9c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <prvAddCurrentTaskToDelayedList+0x94>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3304      	adds	r3, #4
 800172c:	0019      	movs	r1, r3
 800172e:	0010      	movs	r0, r2
 8001730:	f7fe fde9 	bl	8000306 <vListInsert>
}
 8001734:	e010      	b.n	8001758 <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <prvAddCurrentTaskToDelayedList+0x94>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3304      	adds	r3, #4
 8001740:	0019      	movs	r1, r3
 8001742:	0010      	movs	r0, r2
 8001744:	f7fe fddf 	bl	8000306 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	429a      	cmp	r2, r3
 8001750:	d202      	bcs.n	8001758 <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b004      	add	sp, #16
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000100 	.word	0x20000100
 8001764:	20000024 	.word	0x20000024
 8001768:	200000e8 	.word	0x200000e8
 800176c:	200000b8 	.word	0x200000b8
 8001770:	200000b4 	.word	0x200000b4
 8001774:	2000011c 	.word	0x2000011c

08001778 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001782:	f000 fa9f 	bl	8001cc4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <xTimerCreateTimerTask+0x44>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800178e:	490c      	ldr	r1, [pc, #48]	; (80017c0 <xTimerCreateTimerTask+0x48>)
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <xTimerCreateTimerTask+0x4c>)
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <xTimerCreateTimerTask+0x50>)
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2303      	movs	r3, #3
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	2246      	movs	r2, #70	; 0x46
 800179e:	f7ff fa11 	bl	8000bc4 <xTaskCreate>
 80017a2:	0003      	movs	r3, r0
 80017a4:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <xTimerCreateTimerTask+0x38>
 80017ac:	b672      	cpsid	i
 80017ae:	e7fe      	b.n	80017ae <xTimerCreateTimerTask+0x36>
        return xReturn;
 80017b0:	687b      	ldr	r3, [r7, #4]
    }
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	20000158 	.word	0x20000158
 80017c0:	0800221c 	.word	0x0800221c
 80017c4:	080018e9 	.word	0x080018e9
 80017c8:	2000015c 	.word	0x2000015c

080017cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <xTimerGenericCommand+0x1c>
 80017e4:	b672      	cpsid	i
 80017e6:	e7fe      	b.n	80017e6 <xTimerGenericCommand+0x1a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <xTimerGenericCommand+0x90>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d030      	beq.n	8001852 <xTimerGenericCommand+0x86>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80017f0:	2410      	movs	r4, #16
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	601a      	str	r2, [r3, #0]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	609a      	str	r2, [r3, #8]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b05      	cmp	r3, #5
 8001808:	dc19      	bgt.n	800183e <xTimerGenericCommand+0x72>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800180a:	f7ff fee9 	bl	80015e0 <xTaskGetSchedulerState>
 800180e:	0003      	movs	r3, r0
 8001810:	2b02      	cmp	r3, #2
 8001812:	d109      	bne.n	8001828 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <xTimerGenericCommand+0x90>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181a:	1939      	adds	r1, r7, r4
 800181c:	2300      	movs	r3, #0
 800181e:	f7fe fe8c 	bl	800053a <xQueueGenericSend>
 8001822:	0003      	movs	r3, r0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e014      	b.n	8001852 <xTimerGenericCommand+0x86>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <xTimerGenericCommand+0x90>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	2310      	movs	r3, #16
 800182e:	18f9      	adds	r1, r7, r3
 8001830:	2300      	movs	r3, #0
 8001832:	2200      	movs	r2, #0
 8001834:	f7fe fe81 	bl	800053a <xQueueGenericSend>
 8001838:	0003      	movs	r3, r0
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	e009      	b.n	8001852 <xTimerGenericCommand+0x86>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <xTimerGenericCommand+0x90>)
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	2310      	movs	r3, #16
 8001846:	18f9      	adds	r1, r7, r3
 8001848:	2300      	movs	r3, #0
 800184a:	f7fe ff3a 	bl	80006c2 <xQueueGenericSendFromISR>
 800184e:	0003      	movs	r3, r0
 8001850:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001852:	69fb      	ldr	r3, [r7, #28]
    }
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b009      	add	sp, #36	; 0x24
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	20000158 	.word	0x20000158

08001860 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af02      	add	r7, sp, #8
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <prvProcessExpiredTimer+0x84>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3304      	adds	r3, #4
 8001878:	0018      	movs	r0, r3
 800187a:	f7fe fd7a 	bl	8000372 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2228      	movs	r2, #40	; 0x28
 8001882:	5c9b      	ldrb	r3, [r3, r2]
 8001884:	001a      	movs	r2, r3
 8001886:	2304      	movs	r3, #4
 8001888:	4013      	ands	r3, r2
 800188a:	d019      	beq.n	80018c0 <prvProcessExpiredTimer+0x60>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	18d1      	adds	r1, r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f8c3 	bl	8001a24 <prvInsertTimerInActiveList>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d017      	beq.n	80018d2 <prvProcessExpiredTimer+0x72>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	f7ff ff8d 	bl	80017cc <xTimerGenericCommand>
 80018b2:	0003      	movs	r3, r0
 80018b4:	60bb      	str	r3, [r7, #8]
                configASSERT( xResult );
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10a      	bne.n	80018d2 <prvProcessExpiredTimer+0x72>
 80018bc:	b672      	cpsid	i
 80018be:	e7fe      	b.n	80018be <prvProcessExpiredTimer+0x5e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2228      	movs	r2, #40	; 0x28
 80018c4:	5c9b      	ldrb	r3, [r3, r2]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4393      	bics	r3, r2
 80018ca:	b2d9      	uxtb	r1, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2228      	movs	r2, #40	; 0x28
 80018d0:	5499      	strb	r1, [r3, r2]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	0010      	movs	r0, r2
 80018da:	4798      	blx	r3
    }
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b004      	add	sp, #16
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000150 	.word	0x20000150

080018e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80018f0:	2308      	movs	r3, #8
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f853 	bl	80019a0 <prvGetNextExpireTime>
 80018fa:	0003      	movs	r3, r0
 80018fc:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	0011      	movs	r1, r2
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f803 	bl	8001910 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800190a:	f000 f8cd 	bl	8001aa8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800190e:	e7ef      	b.n	80018f0 <prvTimerTask+0x8>

08001910 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800191a:	f7ff faf9 	bl	8000f10 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800191e:	2308      	movs	r3, #8
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f85e 	bl	80019e4 <prvSampleTimeNow>
 8001928:	0003      	movs	r3, r0
 800192a:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d12b      	bne.n	800198a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10c      	bne.n	8001952 <prvProcessTimerOrBlockTask+0x42>
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d808      	bhi.n	8001952 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8001940:	f7ff faf2 	bl	8000f28 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0011      	movs	r1, r2
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff ff88 	bl	8001860 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001950:	e01d      	b.n	800198e <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <prvProcessTimerOrBlockTask+0x88>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <prvProcessTimerOrBlockTask+0x56>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <prvProcessTimerOrBlockTask+0x58>
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <prvProcessTimerOrBlockTask+0x8c>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	0019      	movs	r1, r3
 8001978:	f7ff f8f1 	bl	8000b5e <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800197c:	f7ff fad4 	bl	8000f28 <xTaskResumeAll>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d104      	bne.n	800198e <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8001984:	f000 fa54 	bl	8001e30 <vPortYield>
    }
 8001988:	e001      	b.n	800198e <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 800198a:	f7ff facd 	bl	8000f28 <xTaskResumeAll>
    }
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	20000154 	.word	0x20000154
 800199c:	20000158 	.word	0x20000158

080019a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <prvGetNextExpireTime+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <prvGetNextExpireTime+0x16>
 80019b2:	2201      	movs	r2, #1
 80019b4:	e000      	b.n	80019b8 <prvGetNextExpireTime+0x18>
 80019b6:	2200      	movs	r2, #0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <prvGetNextExpireTime+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e001      	b.n	80019d4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80019d4:	68fb      	ldr	r3, [r7, #12]
    }
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	20000150 	.word	0x20000150

080019e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80019ec:	f7ff fb28 	bl	8001040 <xTaskGetTickCount>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <prvSampleTimeNow+0x3c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d205      	bcs.n	8001a0a <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80019fe:	f000 f903 	bl	8001c08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e002      	b.n	8001a10 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <prvSampleTimeNow+0x3c>)
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8001a16:	68fb      	ldr	r3, [r7, #12]
    }
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000160 	.word	0x20000160

08001a24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d812      	bhi.n	8001a70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	1ad2      	subs	r2, r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d302      	bcc.n	8001a5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e01b      	b.n	8001a96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <prvInsertTimerInActiveList+0x7c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3304      	adds	r3, #4
 8001a66:	0019      	movs	r1, r3
 8001a68:	0010      	movs	r0, r2
 8001a6a:	f7fe fc4c 	bl	8000306 <vListInsert>
 8001a6e:	e012      	b.n	8001a96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d206      	bcs.n	8001a86 <prvInsertTimerInActiveList+0x62>
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d302      	bcc.n	8001a86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001a80:	2301      	movs	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e007      	b.n	8001a96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <prvInsertTimerInActiveList+0x80>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	0019      	movs	r1, r3
 8001a90:	0010      	movs	r0, r2
 8001a92:	f7fe fc38 	bl	8000306 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001a96:	697b      	ldr	r3, [r7, #20]
    }
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b006      	add	sp, #24
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000154 	.word	0x20000154
 8001aa4:	20000150 	.word	0x20000150

08001aa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b08b      	sub	sp, #44	; 0x2c
 8001aac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001aae:	e097      	b.n	8001be0 <prvProcessReceivedCommands+0x138>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	18bb      	adds	r3, r7, r2
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da00      	bge.n	8001abc <prvProcessReceivedCommands+0x14>
 8001aba:	e090      	b.n	8001bde <prvProcessReceivedCommands+0x136>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001abc:	18bb      	adds	r3, r7, r2
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <prvProcessReceivedCommands+0x2c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7fe fc4f 	bl	8000372 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7ff ff84 	bl	80019e4 <prvSampleTimeNow>
 8001adc:	0003      	movs	r3, r0
 8001ade:	61bb      	str	r3, [r7, #24]

                switch( xMessage.xMessageID )
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b09      	cmp	r3, #9
 8001ae8:	d900      	bls.n	8001aec <prvProcessReceivedCommands+0x44>
 8001aea:	e079      	b.n	8001be0 <prvProcessReceivedCommands+0x138>
 8001aec:	009a      	lsls	r2, r3, #2
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <prvProcessReceivedCommands+0x158>)
 8001af0:	18d3      	adds	r3, r2, r3
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	469f      	mov	pc, r3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2228      	movs	r2, #40	; 0x28
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b2d9      	uxtb	r1, r3
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2228      	movs	r2, #40	; 0x28
 8001b06:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001b08:	2408      	movs	r4, #8
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	18d1      	adds	r1, r2, r3
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	69f8      	ldr	r0, [r7, #28]
 8001b1c:	f7ff ff82 	bl	8001a24 <prvInsertTimerInActiveList>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d05d      	beq.n	8001be0 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	2228      	movs	r2, #40	; 0x28
 8001b32:	5c9b      	ldrb	r3, [r3, r2]
 8001b34:	001a      	movs	r2, r3
 8001b36:	2304      	movs	r3, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d051      	beq.n	8001be0 <prvProcessReceivedCommands+0x138>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001b3c:	193b      	adds	r3, r7, r4
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	18d2      	adds	r2, r2, r3
 8001b46:	69f8      	ldr	r0, [r7, #28]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f7ff fe3c 	bl	80017cc <xTimerGenericCommand>
 8001b54:	0003      	movs	r3, r0
 8001b56:	617b      	str	r3, [r7, #20]
                                configASSERT( xResult );
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d140      	bne.n	8001be0 <prvProcessReceivedCommands+0x138>
 8001b5e:	b672      	cpsid	i
 8001b60:	e7fe      	b.n	8001b60 <prvProcessReceivedCommands+0xb8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	2228      	movs	r2, #40	; 0x28
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	b2d9      	uxtb	r1, r3
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2228      	movs	r2, #40	; 0x28
 8001b72:	5499      	strb	r1, [r3, r2]
                        break;
 8001b74:	e034      	b.n	8001be0 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2228      	movs	r2, #40	; 0x28
 8001b7a:	5c9b      	ldrb	r3, [r3, r2]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b2d9      	uxtb	r1, r3
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2228      	movs	r2, #40	; 0x28
 8001b86:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <prvProcessReceivedCommands+0xf6>
 8001b9a:	b672      	cpsid	i
 8001b9c:	e7fe      	b.n	8001b9c <prvProcessReceivedCommands+0xf4>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	18d1      	adds	r1, r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	69f8      	ldr	r0, [r7, #28]
 8001bac:	f7ff ff3a 	bl	8001a24 <prvInsertTimerInActiveList>
                        break;
 8001bb0:	e016      	b.n	8001be0 <prvProcessReceivedCommands+0x138>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2228      	movs	r2, #40	; 0x28
 8001bb6:	5c9b      	ldrb	r3, [r3, r2]
 8001bb8:	001a      	movs	r2, r3
 8001bba:	2302      	movs	r3, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d104      	bne.n	8001bca <prvProcessReceivedCommands+0x122>
                                {
                                    vPortFree( pxTimer );
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fa1a 	bl	8001ffc <vPortFree>
 8001bc8:	e00a      	b.n	8001be0 <prvProcessReceivedCommands+0x138>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2228      	movs	r2, #40	; 0x28
 8001bce:	5c9b      	ldrb	r3, [r3, r2]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4393      	bics	r3, r2
 8001bd4:	b2d9      	uxtb	r1, r3
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2228      	movs	r2, #40	; 0x28
 8001bda:	5499      	strb	r1, [r3, r2]
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001bdc:	e000      	b.n	8001be0 <prvProcessReceivedCommands+0x138>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001bde:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <prvProcessReceivedCommands+0x15c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2208      	movs	r2, #8
 8001be6:	18b9      	adds	r1, r7, r2
 8001be8:	2200      	movs	r2, #0
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7fe fde5 	bl	80007ba <xQueueReceive>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d000      	beq.n	8001bf6 <prvProcessReceivedCommands+0x14e>
 8001bf4:	e75c      	b.n	8001ab0 <prvProcessReceivedCommands+0x8>
        }
    }
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b009      	add	sp, #36	; 0x24
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	08002234 	.word	0x08002234
 8001c04:	20000158 	.word	0x20000158

08001c08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001c0e:	e041      	b.n	8001c94 <prvSwitchTimerLists+0x8c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <prvSwitchTimerLists+0xb4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <prvSwitchTimerLists+0xb4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3304      	adds	r3, #4
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7fe fba2 	bl	8000372 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	0010      	movs	r0, r2
 8001c36:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2228      	movs	r2, #40	; 0x28
 8001c3c:	5c9b      	ldrb	r3, [r3, r2]
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2304      	movs	r3, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d026      	beq.n	8001c94 <prvSwitchTimerLists+0x8c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	18d3      	adds	r3, r2, r3
 8001c4e:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d90e      	bls.n	8001c76 <prvSwitchTimerLists+0x6e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <prvSwitchTimerLists+0xb4>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	0010      	movs	r0, r2
 8001c70:	f7fe fb49 	bl	8000306 <vListInsert>
 8001c74:	e00e      	b.n	8001c94 <prvSwitchTimerLists+0x8c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	f7ff fda3 	bl	80017cc <xTimerGenericCommand>
 8001c86:	0003      	movs	r3, r0
 8001c88:	607b      	str	r3, [r7, #4]
                    configASSERT( xResult );
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <prvSwitchTimerLists+0x8c>
 8001c90:	b672      	cpsid	i
 8001c92:	e7fe      	b.n	8001c92 <prvSwitchTimerLists+0x8a>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <prvSwitchTimerLists+0xb4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1b8      	bne.n	8001c10 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <prvSwitchTimerLists+0xb4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <prvSwitchTimerLists+0xb8>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <prvSwitchTimerLists+0xb4>)
 8001caa:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <prvSwitchTimerLists+0xb8>)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	601a      	str	r2, [r3, #0]
    }
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b006      	add	sp, #24
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	20000150 	.word	0x20000150
 8001cc0:	20000154 	.word	0x20000154

08001cc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001cc8:	f000 f8c2 	bl	8001e50 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <prvCheckForValidListAndQueue+0x48>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d115      	bne.n	8001d00 <prvCheckForValidListAndQueue+0x3c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <prvCheckForValidListAndQueue+0x4c>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7fe faca 	bl	8000270 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <prvCheckForValidListAndQueue+0x50>)
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f7fe fac6 	bl	8000270 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <prvCheckForValidListAndQueue+0x54>)
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <prvCheckForValidListAndQueue+0x4c>)
 8001ce8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <prvCheckForValidListAndQueue+0x58>)
 8001cec:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <prvCheckForValidListAndQueue+0x50>)
 8001cee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	210c      	movs	r1, #12
 8001cf4:	2005      	movs	r0, #5
 8001cf6:	f7fe fbb8 	bl	800046a <xQueueGenericCreate>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <prvCheckForValidListAndQueue+0x48>)
 8001cfe:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001d00:	f000 f8b8 	bl	8001e74 <vPortExitCritical>
    }
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	20000158 	.word	0x20000158
 8001d10:	20000128 	.word	0x20000128
 8001d14:	2000013c 	.word	0x2000013c
 8001d18:	20000150 	.word	0x20000150
 8001d1c:	20000154 	.word	0x20000154

08001d20 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	0452      	lsls	r2, r2, #17
 8001d38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3b04      	subs	r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3b04      	subs	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8001d4c:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <pxPortInitialiseStack+0x50>)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3b14      	subs	r3, #20
 8001d56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3b20      	subs	r3, #32
 8001d62:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	08001d75 	.word	0x08001d75

08001d74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <prvTaskExitError+0x2c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	d001      	beq.n	8001d8a <prvTaskExitError+0x16>
 8001d86:	b672      	cpsid	i
 8001d88:	e7fe      	b.n	8001d88 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8001d8a:	b672      	cpsid	i

    while( ulDummy == 0 )
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0fc      	beq.n	8001d8e <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b002      	add	sp, #8
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	20000004 	.word	0x20000004

08001da4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <pxCurrentTCBConst2>)
 8001db2:	6813      	ldr	r3, [r2, #0]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	3020      	adds	r0, #32
 8001db8:	f380 8809 	msr	PSP, r0
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f380 8814 	msr	CONTROL, r0
 8001dc2:	f3bf 8f6f 	isb	sy
 8001dc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8001dc8:	46ae      	mov	lr, r5
 8001dca:	bc08      	pop	{r3}
 8001dcc:	bc04      	pop	{r2}
 8001dce:	b662      	cpsie	i
 8001dd0:	4718      	bx	r3
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46c0      	nop			; (mov r8, r8)

08001de0 <pxCurrentTCBConst2>:
 8001de0:	20000024 	.word	0x20000024
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46c0      	nop			; (mov r8, r8)

08001de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <xPortStartScheduler+0x40>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <xPortStartScheduler+0x40>)
 8001df2:	21ff      	movs	r1, #255	; 0xff
 8001df4:	0409      	lsls	r1, r1, #16
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <xPortStartScheduler+0x40>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <xPortStartScheduler+0x40>)
 8001e00:	21ff      	movs	r1, #255	; 0xff
 8001e02:	0609      	lsls	r1, r1, #24
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001e08:	f000 f898 	bl	8001f3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <xPortStartScheduler+0x44>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8001e12:	f7ff ffcd 	bl	8001db0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001e16:	f7ff f9d1 	bl	80011bc <vTaskSwitchContext>
    prvTaskExitError();
 8001e1a:	f7ff ffab 	bl	8001d74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	e000ed20 	.word	0xe000ed20
 8001e2c:	20000004 	.word	0x20000004

08001e30 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <vPortYield+0x1c>)
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	0552      	lsls	r2, r2, #21
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8001e3c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8001e40:	f3bf 8f6f 	isb	sy
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	e000ed04 	.word	0xe000ed04

08001e50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8001e54:	b672      	cpsid	i
    uxCriticalNesting++;
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <vPortEnterCritical+0x20>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <vPortEnterCritical+0x20>)
 8001e5e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8001e60:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8001e64:	f3bf 8f6f 	isb	sy
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	20000004 	.word	0x20000004

08001e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <vPortExitCritical+0x2c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <vPortExitCritical+0x10>
 8001e80:	b672      	cpsid	i
 8001e82:	e7fe      	b.n	8001e82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <vPortExitCritical+0x2c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <vPortExitCritical+0x2c>)
 8001e8c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <vPortExitCritical+0x2c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d100      	bne.n	8001e98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8001e96:	b662      	cpsie	i
    }
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8001ea4:	f3ef 8010 	mrs	r0, PRIMASK
 8001ea8:	b672      	cpsid	i
 8001eaa:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	0018      	movs	r0, r3

08001eb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8001eb0:	f380 8810 	msr	PRIMASK, r0
 8001eb4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
	...

08001ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ec0:	f3ef 8009 	mrs	r0, PSP
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <pxCurrentTCBConst>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	3820      	subs	r0, #32
 8001eca:	6010      	str	r0, [r2, #0]
 8001ecc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001ece:	4644      	mov	r4, r8
 8001ed0:	464d      	mov	r5, r9
 8001ed2:	4656      	mov	r6, sl
 8001ed4:	465f      	mov	r7, fp
 8001ed6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001ed8:	b508      	push	{r3, lr}
 8001eda:	b672      	cpsid	i
 8001edc:	f7ff f96e 	bl	80011bc <vTaskSwitchContext>
 8001ee0:	b662      	cpsie	i
 8001ee2:	bc0c      	pop	{r2, r3}
 8001ee4:	6811      	ldr	r1, [r2, #0]
 8001ee6:	6808      	ldr	r0, [r1, #0]
 8001ee8:	3010      	adds	r0, #16
 8001eea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001eec:	46a0      	mov	r8, r4
 8001eee:	46a9      	mov	r9, r5
 8001ef0:	46b2      	mov	sl, r6
 8001ef2:	46bb      	mov	fp, r7
 8001ef4:	f380 8809 	msr	PSP, r0
 8001ef8:	3820      	subs	r0, #32
 8001efa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001efc:	4718      	bx	r3
 8001efe:	46c0      	nop			; (mov r8, r8)

08001f00 <pxCurrentTCBConst>:
 8001f00:	20000024 	.word	0x20000024
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46c0      	nop			; (mov r8, r8)

08001f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f0e:	f7ff ffc9 	bl	8001ea4 <ulSetInterruptMaskFromISR>
 8001f12:	0003      	movs	r3, r0
 8001f14:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001f16:	f7ff f8a1 	bl	800105c <xTaskIncrementTick>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d003      	beq.n	8001f26 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <SysTick_Handler+0x30>)
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0552      	lsls	r2, r2, #21
 8001f24:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff ffc1 	bl	8001eb0 <vClearInterruptMaskFromISR>
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b002      	add	sp, #8
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <vPortSetupTimerInterrupt+0x24>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <vPortSetupTimerInterrupt+0x28>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <vPortSetupTimerInterrupt+0x2c>)
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <vPortSetupTimerInterrupt+0x30>)
 8001f50:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8001f52:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <vPortSetupTimerInterrupt+0x24>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	e000e010 	.word	0xe000e010
 8001f64:	e000e018 	.word	0xe000e018
 8001f68:	e000e014 	.word	0xe000e014
 8001f6c:	00008c9f 	.word	0x00008c9f

08001f70 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned to the required number of bytes. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	d004      	beq.n	8001f8e <pvPortMalloc+0x1e>
            {
                /* Byte alignment required. */
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2207      	movs	r2, #7
 8001f88:	4393      	bics	r3, r2
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	607b      	str	r3, [r7, #4]
            }
        }
    #endif

    vTaskSuspendAll();
 8001f8e:	f7fe ffbf 	bl	8000f10 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <pvPortMalloc+0x7c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <pvPortMalloc+0x36>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <pvPortMalloc+0x80>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <pvPortMalloc+0x7c>)
 8001fa4:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation. */
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <pvPortMalloc+0x84>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <pvPortMalloc+0x88>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d813      	bhi.n	8001fdc <pvPortMalloc+0x6c>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <pvPortMalloc+0x84>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	18d2      	adds	r2, r2, r3
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <pvPortMalloc+0x84>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d90b      	bls.n	8001fdc <pvPortMalloc+0x6c>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <pvPortMalloc+0x7c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <pvPortMalloc+0x84>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <pvPortMalloc+0x84>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <pvPortMalloc+0x84>)
 8001fda:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001fdc:	f7fe ffa4 	bl	8000f28 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b004      	add	sp, #16
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	20001d68 	.word	0x20001d68
 8001ff0:	2000016c 	.word	0x2000016c
 8001ff4:	20001d64 	.word	0x20001d64
 8001ff8:	00001bf7 	.word	0x00001bf7

08001ffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <vPortFree+0x12>
 800200a:	b672      	cpsid	i
 800200c:	e7fe      	b.n	800200c <vPortFree+0x10>
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <SystemClockInit>:
/*****************************************************/
#define msg "Hello World!\n\r"
int count = 0;
/*****************************************************/
void SystemClockInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	RCC->CR |= 1<<0; /* enable HSI clock */
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <SystemClockInit+0x48>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <SystemClockInit+0x48>)
 8002022:	2101      	movs	r1, #1
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
	while((RCC->CR & (uint32_t)(1<<1)) == 0);
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <SystemClockInit+0x48>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d0fa      	beq.n	800202a <SystemClockInit+0x12>
	RCC->APB2ENR |= (uint32_t)(1<<0); /* Alternate Function I/O clock enabled */
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <SystemClockInit+0x48>)
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <SystemClockInit+0x48>)
 800203a:	2101      	movs	r1, #1
 800203c:	430a      	orrs	r2, r1
 800203e:	619a      	str	r2, [r3, #24]
	RCC->APB2ENR |= (uint32_t)(1<<2);/* I/O port A clock enable */
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <SystemClockInit+0x48>)
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <SystemClockInit+0x48>)
 8002046:	2104      	movs	r1, #4
 8002048:	430a      	orrs	r2, r1
 800204a:	619a      	str	r2, [r3, #24]
	RCC->APB2ENR |= (uint32_t)(1<<14);/* USART1 clock enabled */
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SystemClockInit+0x48>)
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <SystemClockInit+0x48>)
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	01c9      	lsls	r1, r1, #7
 8002056:	430a      	orrs	r2, r1
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <GPIO_Init>:
/*****************************************************/
void vTask1(void *pvParameters);
void vTask2(void *pvParameters);
/*****************************************************/
void GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <GPIO_Init+0x30>)
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <GPIO_Init+0x30>)
 800206e:	2110      	movs	r1, #16
 8002070:	430a      	orrs	r2, r1
 8002072:	619a      	str	r2, [r3, #24]
	GPIOC->CRH &=~ (0xF << 20);	/*PC13:Clear all default options */
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <GPIO_Init+0x34>)
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <GPIO_Init+0x34>)
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <GPIO_Init+0x38>)
 800207c:	400a      	ands	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
	GPIOC->CRH |= (0b0110<<20); /*PC13: General purpose output Open-drain and Output mode, max speed 2 MHz*/
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <GPIO_Init+0x34>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <GPIO_Init+0x34>)
 8002086:	21c0      	movs	r1, #192	; 0xc0
 8002088:	03c9      	lsls	r1, r1, #15
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	40011000 	.word	0x40011000
 800209c:	ff0fffff 	.word	0xff0fffff

080020a0 <main>:

int main(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af02      	add	r7, sp, #8
	SystemClockInit();
 80020a6:	f7ff ffb7 	bl	8002018 <SystemClockInit>
	GPIO_Init();
 80020aa:	f7ff ffdb 	bl	8002064 <GPIO_Init>
	xTaskCreate(vTask1, "Task_1", 256, NULL, 1, NULL);
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	005a      	lsls	r2, r3, #1
 80020b2:	490b      	ldr	r1, [pc, #44]	; (80020e0 <main+0x40>)
 80020b4:	480b      	ldr	r0, [pc, #44]	; (80020e4 <main+0x44>)
 80020b6:	2300      	movs	r3, #0
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2301      	movs	r3, #1
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	f7fe fd80 	bl	8000bc4 <xTaskCreate>
	xTaskCreate(vTask2, "Task_2", 256, NULL, 2, NULL);
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	005a      	lsls	r2, r3, #1
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <main+0x48>)
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <main+0x4c>)
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2300      	movs	r3, #0
 80020d6:	f7fe fd75 	bl	8000bc4 <xTaskCreate>
	vTaskStartScheduler();
 80020da:	f7fe fed9 	bl	8000e90 <vTaskStartScheduler>
	while(1)
 80020de:	e7fe      	b.n	80020de <main+0x3e>
 80020e0:	08002224 	.word	0x08002224
 80020e4:	080020f1 	.word	0x080020f1
 80020e8:	0800222c 	.word	0x0800222c
 80020ec:	08002119 	.word	0x08002119

080020f0 <vTask1>:
	}
}
/*****************************************************/
/******************************************************************************/
void vTask1 (void *pvParameters)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GPIOC->ODR |= 1<<13;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <vTask1+0x24>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <vTask1+0x24>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	0189      	lsls	r1, r1, #6
 8002102:	430a      	orrs	r2, r1
 8002104:	60da      	str	r2, [r3, #12]
		vTaskDelay(300);
 8002106:	2396      	movs	r3, #150	; 0x96
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	0018      	movs	r0, r3
 800210c:	f7fe fe9a 	bl	8000e44 <vTaskDelay>
		GPIOC->ODR |= 1<<13;
 8002110:	e7f2      	b.n	80020f8 <vTask1+0x8>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40011000 	.word	0x40011000

08002118 <vTask2>:
	}
}

/******************************************************************************/
void vTask2 (void *pvParameters)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GPIOC->ODR |= 1<<13;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <vTask2+0x20>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <vTask2+0x20>)
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	0189      	lsls	r1, r1, #6
 800212a:	430a      	orrs	r2, r1
 800212c:	60da      	str	r2, [r3, #12]
		vTaskDelay(150);
 800212e:	2096      	movs	r0, #150	; 0x96
 8002130:	f7fe fe88 	bl	8000e44 <vTaskDelay>
		GPIOC->ODR |= 1<<13;
 8002134:	e7f4      	b.n	8002120 <vTask2+0x8>
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	40011000 	.word	0x40011000

0800213c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	; (8002174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	; (8002180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002162:	f000 f810 	bl	8002186 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002166:	f000 f813 	bl	8002190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216a:	f7ff ff99 	bl	80020a0 <main>
  bx lr
 800216e:	4770      	bx	lr
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002178:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 800217c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002180:	20001d6c 	.word	0x20001d6c

08002184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC1_2_IRQHandler>

08002186 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <__libc_init_array>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	2600      	movs	r6, #0
 8002194:	4d0c      	ldr	r5, [pc, #48]	; (80021c8 <__libc_init_array+0x38>)
 8002196:	4c0d      	ldr	r4, [pc, #52]	; (80021cc <__libc_init_array+0x3c>)
 8002198:	1b64      	subs	r4, r4, r5
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	42a6      	cmp	r6, r4
 800219e:	d109      	bne.n	80021b4 <__libc_init_array+0x24>
 80021a0:	2600      	movs	r6, #0
 80021a2:	f000 f82b 	bl	80021fc <_init>
 80021a6:	4d0a      	ldr	r5, [pc, #40]	; (80021d0 <__libc_init_array+0x40>)
 80021a8:	4c0a      	ldr	r4, [pc, #40]	; (80021d4 <__libc_init_array+0x44>)
 80021aa:	1b64      	subs	r4, r4, r5
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	42a6      	cmp	r6, r4
 80021b0:	d105      	bne.n	80021be <__libc_init_array+0x2e>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	00b3      	lsls	r3, r6, #2
 80021b6:	58eb      	ldr	r3, [r5, r3]
 80021b8:	4798      	blx	r3
 80021ba:	3601      	adds	r6, #1
 80021bc:	e7ee      	b.n	800219c <__libc_init_array+0xc>
 80021be:	00b3      	lsls	r3, r6, #2
 80021c0:	58eb      	ldr	r3, [r5, r3]
 80021c2:	4798      	blx	r3
 80021c4:	3601      	adds	r6, #1
 80021c6:	e7f2      	b.n	80021ae <__libc_init_array+0x1e>
 80021c8:	0800225c 	.word	0x0800225c
 80021cc:	0800225c 	.word	0x0800225c
 80021d0:	0800225c 	.word	0x0800225c
 80021d4:	08002260 	.word	0x08002260

080021d8 <memcpy>:
 80021d8:	2300      	movs	r3, #0
 80021da:	b510      	push	{r4, lr}
 80021dc:	429a      	cmp	r2, r3
 80021de:	d100      	bne.n	80021e2 <memcpy+0xa>
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	5ccc      	ldrb	r4, [r1, r3]
 80021e4:	54c4      	strb	r4, [r0, r3]
 80021e6:	3301      	adds	r3, #1
 80021e8:	e7f8      	b.n	80021dc <memcpy+0x4>

080021ea <memset>:
 80021ea:	0003      	movs	r3, r0
 80021ec:	1882      	adds	r2, r0, r2
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d100      	bne.n	80021f4 <memset+0xa>
 80021f2:	4770      	bx	lr
 80021f4:	7019      	strb	r1, [r3, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	e7f9      	b.n	80021ee <memset+0x4>
	...

080021fc <_init>:
 80021fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002202:	bc08      	pop	{r3}
 8002204:	469e      	mov	lr, r3
 8002206:	4770      	bx	lr

08002208 <_fini>:
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220e:	bc08      	pop	{r3}
 8002210:	469e      	mov	lr, r3
 8002212:	4770      	bx	lr
